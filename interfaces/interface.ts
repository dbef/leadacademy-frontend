/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getHello"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UsersController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/access-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_getAccessToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/sign-up": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sign un */
        post: operations["AuthController_signUp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/sign-in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sign in */
        post: operations["AuthController_signIn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/refresh-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generates new access token */
        post: operations["AuthController_generateAccessToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AuthController_me"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** ADMIN Sign in */
        post: operations["AdminController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/refresh-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generates new access token */
        post: operations["AdminController_findAll"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AdminController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/files/upload/{folder_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload files */
        post: operations["FilesController_uploadFiles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/files/upload/by-folder/{folder_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload files */
        post: operations["FilesController_uploadFilesByFolder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/files/{file_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** remove files */
        delete: operations["FilesController_deleteFile"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/files/create-folder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create folder */
        post: operations["FilesController_createFolder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/files/update-folder/{folder_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update folder */
        patch: operations["FilesController_updateFolder"];
        trace?: never;
    };
    "/api/v1/admin/files/folders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all folders */
        get: operations["FilesController_getAllFolders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all files for admin */
        get: operations["FilesController_getAllfiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create course */
        post: operations["CoursesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/courses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Edit course */
        get: operations["CoursesController_findOne"];
        put?: never;
        post?: never;
        /** Delete course */
        delete: operations["CoursesController_remove"];
        options?: never;
        head?: never;
        /** Edit course */
        patch: operations["CoursesController_update"];
        trace?: never;
    };
    "/api/v1/admin/applications/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update application status */
        patch: operations["ApplicationsController_update"];
        trace?: never;
    };
    "/api/v1/admin/applications/{course_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** fetches all applications for a course */
        get: operations["ApplicationsController_getAllWithCourse"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/applications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** fetches all applications for a course */
        get: operations["ApplicationsController_getAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/campus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all campuses
         * @description Get all campuses
         */
        get: operations["CampusController_findAll"];
        put?: never;
        /**
         * Create a new campus
         * @description Create
         */
        post: operations["CampusController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/campus/{campus_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CampusController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/campus/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a campus
         * @description Delete a campus
         */
        delete: operations["CampusController_remove"];
        options?: never;
        head?: never;
        patch: operations["CampusController_update"];
        trace?: never;
    };
    "/api/v1/admin/news": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["NewsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/news/{news_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["NewsController_remove"];
        options?: never;
        head?: never;
        patch: operations["NewsController_update"];
        trace?: never;
    };
    "/api/v1/admin/lecturer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["LecturerController_findAll"];
        put?: never;
        post: operations["LecturerController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/lecturer/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["LecturerController_findOne"];
        put?: never;
        post?: never;
        delete: operations["LecturerController_remove"];
        options?: never;
        head?: never;
        patch: operations["LecturerController_update"];
        trace?: never;
    };
    "/api/v1/payment/redirect/{application_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["PaymentController_getAccessToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payment/{application_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["PaymentController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payment/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["PaymentController_callBack"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/application": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create application */
        post: operations["ApplicationController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all courses */
        get: operations["CoursesController_findAllCourses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/courses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get course by id */
        get: operations["CoursesController_findOneCourse"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gallery": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GalleryController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gallery/cover": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GalleryController_coverImages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/campus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CampusController_findAllCampuses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/news": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["NewsController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/news/{news_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["NewsController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateUserDto: {
            /** @description The email of the user */
            email: string;
            /** @description The password of the user */
            password: string;
        };
        CreateAuthDto: {
            /** @description The email of the user */
            email: string;
            /** @description The password of the user */
            password: string;
        };
        UserDto: {
            /** @description The id of the user */
            id: string;
            /** @description The email of the user */
            email: string;
        };
        AuthRtDto: {
            /** @description The user */
            user: components["schemas"]["UserDto"];
            /** @description access token */
            accessToken: string;
            /** @description refresh token */
            refreshToken: string;
        };
        SignInDto: {
            /** @description The email of the user */
            email: string;
            /** @description The password of the user */
            password: string;
        };
        GenerateNewAccessTokenDto: {
            /** @description The refresh token of the user */
            refreshToken: string;
        };
        AdminSignInDto: {
            /**
             * @description The username of the admin
             * @example admin
             */
            username: string;
            /**
             * @description The password of the admin
             * @example password
             */
            password: string;
        };
        AdminAuthRt: {
            /**
             * @description The username of the admin
             * @example admin
             */
            username: string;
            /**
             * @description The accessToken of the admin
             * @example accessToken
             */
            accessToken: string;
            /**
             * @description The refreshToken of the admin
             * @example admin
             */
            refreshToken: string;
        };
        GenerateNewAdminAccessTokenDto: {
            /** @description The refresh token of the user */
            refreshToken: string;
        };
        AdminDto: {
            /**
             * @description The username of the admin
             * @example admin
             */
            username: string;
        };
        UploadedFilesDto: {
            /**
             * @description The original name of the file
             * @example original_name
             */
            original_name: string;
            /**
             * @description The url of the file
             * @example url
             */
            url: string;
            /**
             * @description The type of the file
             * @example type
             */
            type: string;
            /**
             * @description The type of the file
             * @example locaiton
             */
            location: string;
        };
        NewUploadedFiles: {
            name: string;
            type: string;
        };
        FolderDto: {
            /** @description Folder name */
            folder_id: string;
            /** @description Folder name */
            folder_name: string;
            /** @description Folder name */
            created_at: string;
            /** @description Folder name */
            updated_at: string;
        };
        FileDto: {
            /**
             * @description Unique identifier for the media
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            media_id: string;
            /**
             * @description URL where the media is stored
             * @example https://example.com/media.jpg
             */
            media_url: string;
            /**
             * @description Name of the media file
             * @example image.jpg
             */
            media_name: string;
            /**
             * @description Location of the media
             * @example New York
             */
            location: string;
            /**
             * @description Type of the media
             * @example image
             */
            type: string;
            /**
             * @description Size of the media file
             * @default 0
             * @example 123.45
             */
            media_size: number;
            /**
             * @description Creation date of the media
             * @default now
             * @example 2025-02-24T00:00:00.000Z
             */
            created_at: string;
            /**
             * @description Last updated date of the media
             * @default updatedAt
             * @example 2025-02-24T00:00:00.000Z
             */
            updated_at: string;
            /**
             * @description Folder ID the media belongs to
             * @example abc123
             */
            folder_id?: string;
            /** @description Related folder information */
            folder?: components["schemas"]["FolderDto"];
        };
        CreateFolderDto: {
            /** @description Folder name */
            folder_name: string;
        };
        FileDtoRt: {
            /** @description List of files */
            data: components["schemas"]["FileDto"][];
            /** @description Total number of files */
            count: number;
        };
        CreateCourseOptionDto: {
            /** @description Start date of the course */
            start_date: string;
            /** @description End date of the course */
            end_date: string;
            /**
             * @description Price of the course
             * @default 0
             */
            option_price: number;
        };
        CreateCourseDto: {
            /** @description Title in Georgian */
            title_ka: string;
            /** @description Title in English */
            title_en: string;
            /** @description Description in Georgian */
            description_ka: string;
            /** @description Description in English */
            description_en: string;
            /** @description language */
            language: string;
            /** @description Start date of the course */
            start_date: string;
            /** @description Is the course published? */
            is_published: boolean;
            /** @description End date of the course */
            end_date: string;
            /**
             * @description Maximum number of students
             * @default 50
             */
            max_students: number;
            /**
             * @description Price of the course
             * @default 0
             */
            price: number;
            /**
             * @description Price of the course
             * @default 0
             */
            day_price: number;
            /** @description Lecturer ID */
            lecturer_id?: string;
            /** @description List of lecturer IDs */
            lecturers?: string[];
            /** @description List of category IDs */
            campus_id?: string;
            /** @description Course media */
            course_media?: components["schemas"]["FileDto"][];
            /** @description Course files */
            course_files?: components["schemas"]["FileDto"][];
            /** @description kewords ka */
            keywords_ka?: string;
            /** @description kewords ka */
            registration_url?: string;
            /** @description kewords ka */
            keywords_en?: string;
            /** @description kewords ka */
            short_des_en?: string;
            /** @description kewords ka */
            short_des_ka?: string;
            /** @description Course options */
            course_options?: components["schemas"]["CreateCourseOptionDto"][];
        };
        ApplicationsCount: {
            /** @description Number of applications for the course */
            application: number;
        };
        FileCourseAssnDto: {
            media_course_assn_id: string;
            media_id: string;
            course_id: string;
            media?: components["schemas"]["FileDto"];
        };
        LecturerDto: {
            id: string;
            picture?: string;
            first_name_ka: string;
            last_name_ka: string;
            first_name_en: string;
            last_name_en: string;
            biography_ka: string;
            biography_en: string;
            created_at: string;
            updated_at: string;
        };
        LecturerCourseAssnDto: {
            lecturer: components["schemas"]["LecturerDto"];
        };
        CampusFileAssnDto: {
            campus_media_assn_id: string;
            media_id: string;
            campus_id: string;
            media?: components["schemas"]["FileDto"];
        };
        CampusDto: {
            campus_id: string;
            campus_name_ka: string;
            campus_name_en: string;
            maps_url?: string;
            description_ka: string;
            description_en: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            campus_name_short?: string;
            campus_media_assn: components["schemas"]["CampusFileAssnDto"][];
            campus_file_assn: components["schemas"]["CampusFileAssnDto"][];
        };
        CourseOptionsDto: {
            /**
             * Format: uuid
             * @description Unique ID of the course option
             */
            course_options_id: string;
            /**
             * Format: date-time
             * @description Start date of the course option
             */
            start_date: string;
            /**
             * Format: date-time
             * @description End date of the course option
             */
            end_date: string;
            /**
             * @description Price of the course option
             * @default 0
             */
            option_price: number;
            /**
             * Format: uuid
             * @description ID of the course this option belongs to
             */
            course_id?: string;
            /**
             * Format: date-time
             * @description End date of the course option
             */
            created_at: string;
            /**
             * Format: date-time
             * @description End date of the course option
             */
            updated_at: string;
        };
        CourseDto: {
            /**
             * Format: uuid
             * @description Unique ID of the course
             */
            course_id: string;
            /** @description Title in Georgian */
            title_ka: string;
            /** @description Title in English */
            title_en: string;
            /** @description Description in Georgian */
            description_ka: string;
            /** @description Published or not */
            is_published: boolean;
            /** @description Description in English */
            description_en: string;
            /** @description language */
            language: string;
            /** @description URL id */
            url_id: string;
            /**
             * Format: date-time
             * @description Start date of the course
             */
            start_date: string;
            /**
             * Format: date-time
             * @description End date of the course
             */
            end_date: string;
            /**
             * @description Maximum number of students
             * @default 50
             */
            max_students: number;
            /**
             * @description Price of the course
             * @default 0
             */
            price: number;
            /**
             * @description Price of the course
             * @default 0
             */
            day_price: number;
            /**
             * Format: uuid
             * @description ID of the lecturer
             */
            lecturer_id?: string;
            /**
             * Format: uuid
             * @description ID of the creator
             */
            created_by?: string;
            /**
             * Format: date-time
             * @description Date the course was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Date the course was last updated
             */
            updated_at: string;
            /** @description Apps count */
            _count?: components["schemas"]["ApplicationsCount"];
            /** @description Array of media associated with the course */
            media_course_assn: components["schemas"]["FileCourseAssnDto"][];
            /** @description Array of media associated with the course */
            files_course_assn: components["schemas"]["FileCourseAssnDto"][];
            /** @description kewords ka */
            keywords_ka?: string;
            /** @description kewords ka */
            keywords_en?: string;
            /** @description kewords ka */
            registration_url?: string;
            /** @description kewords ka */
            short_des_en?: string;
            /** @description kewords ka */
            short_des_ka?: string;
            /** @description Array of media associated with the course */
            lecturer_course_assn: components["schemas"]["LecturerCourseAssnDto"][];
            /** @description Array of media associated with the course */
            campuse: components["schemas"]["CampusDto"];
            /** @description List of course options */
            course_options?: components["schemas"]["CourseOptionsDto"][];
        };
        EditCourseDto: {
            /** @description Title in Georgian */
            title_ka?: string;
            /** @description Title in English */
            title_en?: string;
            /** @description Description in Georgian */
            description_ka?: string;
            /** @description Description in English */
            description_en?: string;
            /** @description language */
            language?: string;
            /** @description Start date of the course */
            start_date?: string;
            /** @description End date of the course */
            end_date?: string;
            /**
             * @description Maximum number of students
             * @default 50
             */
            max_students: number;
            /**
             * @description Price of the course
             * @default 0
             */
            price: number;
            /**
             * @description Day Price of the course
             * @default 0
             */
            day_price: number;
            /** @description Lecturer ID */
            lecturer_id?: string;
            /** @description Course media */
            is_published?: boolean;
            /** @description Course media */
            course_media?: components["schemas"]["FileDto"][];
            /** @description Course files */
            course_files?: components["schemas"]["FileDto"][];
            /** @description kewords ka */
            keywords_ka?: string;
            /** @description kewords ka */
            registration_url?: string;
            /** @description kewords ka */
            keywords_en?: string;
            /** @description kewords ka */
            short_des_en?: string;
            /** @description kewords ka */
            short_des_ka?: string;
            /** @description List of lecturer IDs */
            lecturers?: string[];
            /** @description List of category IDs */
            campus_id?: string;
            /** @description Course options */
            course_options?: components["schemas"]["CreateCourseOptionDto"][];
        };
        UpdateApplicationDtoAdmin: {
            status: string;
        };
        ApplicationDto: {
            /**
             * Format: uuid
             * @description Unique identifier for the application
             */
            application_id: string;
            /**
             * Format: uuid
             * @description Unique identifier for the course
             */
            course_id: string;
            /**
             * @description Application status
             * @default pending
             */
            status: string;
            /** @description Parent First Name */
            parent_name: string;
            /** @description Parent Last Name */
            parent_lastname: string;
            /** @description Parent Personal Number */
            parent_pn: string;
            /** @description Parent Email */
            parent_email: string;
            /** @description Parent Phone Number */
            parent_phone: string;
            /**
             * @description Relationship to Student
             * @default parent
             */
            relation: string;
            /** @description Parent Date of Birth */
            parent_dob: string;
            /** @description Parent Gender */
            parent_gender: string;
            /** @description Parent Nationality */
            parent_nationality: string;
            /** @description Country of Residence */
            parent_country: string;
            /** @description Home Address */
            parent_address: string;
            /** @description City */
            parent_city: string;
            /** @description Student First Name */
            student_name: string;
            /** @description Student Last Name */
            student_lastname: string;
            /** @description Student Personal Number */
            student_pn: string;
            /** @description Student Email */
            student_email: string;
            /** @description Student Phone Number */
            student_phone: string;
            /** @description Student Class */
            student_class: string;
            /** @description Student Date of Birth */
            student_dob: string;
            /** @description Student Gender */
            student_gender: string;
            /** @description Educational Program */
            program: string;
            /** @description Potential Roommate */
            potential_roommate?: string;
            /** @description Allergens */
            alergens?: string;
            /** @description Medications */
            medicaments?: string;
            /** @description Dietary Restrictions */
            diet_restrictions?: string;
            /** @description Physical Disabilities */
            physical_disabilities?: string;
            /** @description Additional Medical Information */
            additional_info?: string;
            /** @description Additional Medical Information */
            special_needs?: string;
            /** @description Additional Medical Information */
            relationship_with_peers?: string;
            /** @description Additional Medical Information */
            social_skills?: string;
            /** @description Additional Medical Information */
            emergency_relation?: string;
            /** @description Additional Medical Information */
            emergency_contact_name?: string;
            /** @description Additional Medical Information */
            emergency_contact_phone?: string;
            /** @description Days attending */
            days_attending?: number;
            /** @description Additional Medical Information */
            additional_comfort_info?: string;
            /** @description Medical Terms Agreement */
            medical_terms: boolean;
            /** @description Medical Terms Agreement */
            media_release: string;
            /** @description Terms and Conditions Agreement */
            terms_and_conditions: boolean;
            /** @description Child date of birth */
            created_at: string;
            /** @description Child date of birth */
            updated_at: string;
            /** @description Course */
            course?: components["schemas"]["CourseDto"];
            /** @description Course Option ID */
            course_option_id?: string;
            /** @description Course Option Details */
            course_option: components["schemas"]["CourseOptionsDto"];
        };
        CreateCampusDto: {
            /** @description Title in Georgian */
            campus_name_ka: string;
            /** @description Title in English */
            campus_name_en: string;
            /** @description Description in Georgian */
            description_ka: string;
            /** @description Description in English */
            description_en: string;
            /** @description Start date of the course */
            maps_url: string;
            /** @description Course media */
            campus_media?: components["schemas"]["FileDto"][];
            /** @description Course files */
            campus_files?: components["schemas"]["FileDto"][];
        };
        CreateNewsDto: {
            /** @description Title in Georgian */
            title_ka: string;
            /** @description Title in English */
            title_en: string;
            /** @description Description in Georgian */
            description_ka: string;
            /** @description Description in English */
            description_en: string;
            /** @description Course media */
            news_media?: components["schemas"]["FileDto"][];
            /** @description kewords ka */
            keywords_ka?: string;
            /** @description kewords ka */
            hash_tags?: string;
            /** @description kewords ka */
            keywords_en?: string;
            /** @description kewords ka */
            short_des_en?: string;
            /** @description kewords ka */
            short_des_ka?: string;
        };
        NewsMediaDto: {
            /**
             * Format: uuid
             * @description Unique ID of the course media
             */
            news_media_id: string;
            /**
             * Format: uuid
             * @description ID of the associated course
             */
            news_id: string;
            /** @description URL of the media file */
            media_url: string;
            /** @description Original name of the media file */
            original_name: string;
            /** @description Location of the media file */
            location: string;
            /** @description Type of the media file */
            type: string;
            /** @description Position of the media file */
            position: number;
            /**
             * Format: date-time
             * @description Date the media was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Date the media was last updated
             */
            updated_at: string;
        };
        MediaNewsAssnDto: {
            news_media_assn_id: string;
            media_id: string;
            news_id: string;
            media?: components["schemas"]["FileDto"];
        };
        NewsDto: {
            /**
             * Format: uuid
             * @description Unique ID of the news item
             */
            news_id: string;
            title_ka: string;
            title_en: string;
            description_ka: string;
            description_en: string;
            url_id: string;
            /**
             * Format: date-time
             * @description Creation timestamp (auto-filled by server if omitted)
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description Last update timestamp (auto-filled by server if omitted)
             */
            updated_at?: string;
            hashtags?: string;
            short_des_ka?: string;
            short_des_en?: string;
            keywords_ka?: string;
            keywords_en?: string;
            /** @description List of media associated with the news item */
            news_media?: components["schemas"]["NewsMediaDto"][];
            /** @description List of media associated with the news item */
            news_media_assn: components["schemas"]["MediaNewsAssnDto"][];
        };
        UpdateNewsDto: {
            /** @description Title in Georgian */
            title_ka?: string;
            /** @description Title in English */
            title_en?: string;
            /** @description Description in Georgian */
            description_ka?: string;
            /** @description Description in English */
            description_en?: string;
            /** @description Course media */
            news_media?: components["schemas"]["FileDto"][];
            /** @description kewords ka */
            keywords_ka?: string;
            /** @description kewords ka */
            hash_tags?: string;
            /** @description kewords ka */
            keywords_en?: string;
            /** @description kewords ka */
            short_des_en?: string;
            /** @description kewords ka */
            short_des_ka?: string;
        };
        CreateLecturerDto: {
            /** @description Profile picture URL */
            picture?: string;
            /** @description First name in Georgian */
            first_name_ka: string;
            /** @description Last name in Georgian */
            last_name_ka: string;
            /** @description First name in English */
            first_name_en: string;
            /** @description Last name in English */
            last_name_en: string;
            /** @description Biography in Georgian */
            biography_ka: string;
            /** @description Biography in English */
            biography_en: string;
        };
        CreateApplicationDto: {
            /**
             * Format: uuid
             * @description Unique identifier for the course
             */
            course_id: string;
            /** @description Parent First Name */
            parent_name: string;
            /** @description Parent Last Name */
            parent_lastname: string;
            /** @description Parent Personal Number */
            parent_pn: string;
            /** @description Parent Email */
            parent_email: string;
            /** @description Parent Phone Number */
            parent_phone: string;
            /** @description Relationship to Student */
            relation: string;
            /** @description Parent Date of Birth */
            parent_dob: string;
            /** @description Parent Gender */
            parent_gender: string;
            /** @description Parent Gender */
            student_gender: string;
            /** @description Parent Nationality */
            nationality: string;
            /** @description Country of Residence */
            country: string;
            /** @description Home Address */
            address: string;
            /** @description City */
            city: string;
            /** @description Days attending */
            days_attending: number;
            /** @description Student First Name */
            student_name: string;
            /** @description Student Last Name */
            student_lastname: string;
            /** @description Student Personal Number */
            student_pn: string;
            /** @description Student Email */
            student_email: string;
            /** @description Student Phone Number */
            student_phone: string;
            /** @description Student Class */
            student_class: string;
            /** @description Student Date of Birth */
            student_dob: string;
            /** @description Educational Program */
            program: string;
            /** @description Potential Roommate */
            potential_roommate: string;
            /** @description Allergens */
            alergens: string;
            /** @description Medications */
            medicaments: string;
            /** @description Dietary Restrictions */
            diet_restrictions: string;
            /** @description Physical Disabilities */
            physical_disabilities?: string;
            /** @description Additional Medical Information */
            additional_info?: string;
            /** @description Additional Medical Information */
            special_needs?: string;
            /** @description Additional Medical Information */
            relationship_with_peers?: string;
            /** @description Additional Medical Information */
            social_skills?: string;
            /** @description Additional Medical Information */
            emergency_relation?: string;
            /** @description Additional Medical Information */
            emergency_contact_name?: string;
            /** @description Additional Medical Information */
            emergency_contact_phone?: string;
            /** @description Additional Medical Information */
            additional_comfort_info?: string;
            /** @description Medical Terms Agreement */
            media_release: string;
            /** @description Medical Terms Agreement */
            medical_terms: boolean;
            /** @description Terms and Conditions Agreement */
            terms_and_conditions: boolean;
            /** @description Course Option ID */
            course_option_id?: string;
        };
        CreatedApplicationDto: {
            /**
             * @description The id of the application
             * @example 1234567890abcdef12345678
             */
            application_id: string;
        };
        NewsRtDto: {
            /** @description List of news items */
            data: components["schemas"]["NewsDto"][];
            /** @description Total number of news items */
            count: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_getAccessToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_signUp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAuthDto"];
            };
        };
        responses: {
            /** @description User successfully registered */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthRtDto"];
                };
            };
        };
    };
    AuthController_signIn: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignInDto"];
            };
        };
        responses: {
            /** @description User successfully signed in */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthRtDto"];
                };
            };
        };
    };
    AuthController_generateAccessToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GenerateNewAccessTokenDto"];
            };
        };
        responses: {
            /** @description User token successfully refreshed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthRtDto"];
                };
            };
        };
    };
    AuthController_me: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AdminController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminSignInDto"];
            };
        };
        responses: {
            /** @description Admin successfully signed in */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminAuthRt"];
                };
            };
        };
    };
    AdminController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GenerateNewAdminAccessTokenDto"];
            };
        };
        responses: {
            /** @description Admin token successfully refreshed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminAuthRt"];
                };
            };
        };
    };
    AdminController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Admin successfully signed in */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminDto"];
                };
            };
        };
    };
    FilesController_uploadFiles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Folder name to upload files */
                folder_name: string;
            };
            cookie?: never;
        };
        /** @description List of files to upload */
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"];
            };
        };
        responses: {
            /** @description Files successfully uploaded */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadedFilesDto"][];
                };
            };
        };
    };
    FilesController_uploadFilesByFolder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Folder name to upload files */
                folder_name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NewUploadedFiles"][];
            };
        };
        responses: {
            /** @description Files successfully uploaded */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileDto"][];
                };
            };
        };
    };
    FilesController_deleteFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description file name to delete */
                file_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Files successfully removed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FilesController_createFolder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateFolderDto"];
            };
        };
        responses: {
            /** @description Folder successfully created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FolderDto"];
                };
            };
        };
    };
    FilesController_updateFolder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Folder id to update */
                folder_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateFolderDto"];
            };
        };
        responses: {
            /** @description Folder successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FolderDto"];
                };
            };
        };
    };
    FilesController_getAllFolders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All folders successfully fetched */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FolderDto"][];
                };
            };
        };
    };
    FilesController_getAllfiles: {
        parameters: {
            query: {
                /** @description Number of rows per page */
                rowsPerPage: number;
                /** @description Current page number */
                page: number;
                /** @description Text to search for */
                searchText?: string;
                /** @description Field to sort by */
                sortBy: string;
                /** @description Direction of sorting */
                direction: string;
                /** @description folder name */
                folder_name?: string;
                /** @description folder name */
                file_type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All folders successfully fetched */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileDtoRt"];
                };
            };
        };
    };
    CoursesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCourseDto"];
            };
        };
        responses: {
            /** @description Course successfully created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseDto"];
                };
            };
        };
    };
    CoursesController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Course successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseDto"];
                };
            };
        };
    };
    CoursesController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Course successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CoursesController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditCourseDto"];
            };
        };
        responses: {
            /** @description Course successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseDto"];
                };
            };
        };
    };
    ApplicationsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Application id */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateApplicationDtoAdmin"];
            };
        };
        responses: {
            /** @description Application updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ApplicationsController_getAllWithCourse: {
        parameters: {
            query?: {
                /** @description Filter by status */
                status?: string;
            };
            header?: never;
            path: {
                /** @description Course id */
                course_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description all applicants on course */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplicationDto"][];
                };
            };
        };
    };
    ApplicationsController_getAll: {
        parameters: {
            query?: {
                /** @description Filter by status */
                status?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description all applicants on course */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplicationDto"][];
                };
            };
        };
    };
    CampusController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Campuses fetched successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampusDto"][];
                };
            };
        };
    };
    CampusController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCampusDto"];
            };
        };
        responses: {
            /** @description Campus created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampusDto"];
                };
            };
        };
    };
    CampusController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Campus name */
                campus_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Campus fetched successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampusDto"];
                };
            };
        };
    };
    CampusController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Campus deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CampusController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Campus ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCampusDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NewsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateNewsDto"];
            };
        };
        responses: {
            /** @description News item created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NewsDto"];
                };
            };
        };
    };
    NewsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique ID of the news item */
                news_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NewsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique ID of the news item */
                news_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateNewsDto"];
            };
        };
        responses: {
            /** @description News item updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NewsDto"];
                };
            };
        };
    };
    LecturerController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lecturer created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LecturerDto"][];
                };
            };
        };
    };
    LecturerController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateLecturerDto"];
            };
        };
        responses: {
            /** @description Lecturer created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LecturerDto"];
                };
            };
        };
    };
    LecturerController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Lecturer id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lecturer created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LecturerDto"];
                };
            };
        };
    };
    LecturerController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LecturerController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Lecturer id */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateLecturerDto"];
            };
        };
        responses: {
            /** @description Lecturer created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LecturerDto"];
                };
            };
        };
    };
    PaymentController_getAccessToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the application to create a payment for */
                application_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PaymentController_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the application to create a payment for */
                application_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseDto"];
                };
            };
        };
    };
    PaymentController_callBack: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ApplicationController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateApplicationDto"];
            };
        };
        responses: {
            /** @description Application successfully created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreatedApplicationDto"];
                };
            };
        };
    };
    CoursesController_findAllCourses: {
        parameters: {
            query?: {
                /** @description Location of the course */
                location?: string;
                /** @description Location of the course */
                season?: string;
                /** @description Location of the course */
                limit?: string;
                /** @description Number of rows per page */
                rowsPerPage?: number;
                /** @description Current page number */
                page?: number;
                /** @description Text to search for */
                searchText?: string;
                /** @description Field to sort by */
                sortBy?: string;
                /** @description Field to sort by */
                is_published?: string;
                /** @description Direction of sorting */
                direction?: string;
                /** @description Direction of sorting */
                status?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of all courses */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseDto"][];
                };
            };
        };
    };
    CoursesController_findOneCourse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Course found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseDto"];
                };
            };
        };
    };
    GalleryController_findAll: {
        parameters: {
            query: {
                /** @description Number of rows per page */
                rowsPerPage: number;
                /** @description Current page number */
                page: number;
                /** @description Text to search for */
                searchText?: string;
                /** @description Field to sort by */
                sortBy: string;
                /** @description Direction of sorting */
                direction: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of all media files */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileDtoRt"];
                };
            };
        };
    };
    GalleryController_coverImages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of all media files */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileDto"][];
                };
            };
        };
    };
    CampusController_findAllCampuses: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all Campuses */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampusDto"][];
                };
            };
        };
    };
    NewsController_findAll: {
        parameters: {
            query: {
                /** @description Number of rows per page */
                rowsPerPage: number;
                /** @description Current page number */
                page: number;
                /** @description Text to search for */
                searchText?: string;
                /** @description Field to sort by */
                sortBy: string;
                /** @description Direction of sorting */
                direction: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of all news items */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NewsRtDto"];
                };
            };
        };
    };
    NewsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique ID of the news item */
                news_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Details of a specific news item */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NewsDto"];
                };
            };
        };
    };
}
